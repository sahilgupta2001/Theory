Let's get Started
for example, if we consider a car, then based on the OOPs model - 
- Class = A specific car model, such as Audi A4, BMW I8, Maruti Suzuki Vitara Brezza, etc.
- Object = A specific car of any model, like the car you own
- Characteristics = What is the color of your car? what is the classis number of ypur car? etc
- behaviour = How to start the car? How to change the gear of the car? etc.
Characteristics also known as data, attributes, or properties.
Behaviour also known as the functions, procedures or methods.


1. What is meant by the term OOPs ?
  OOPs refers to Object-Oriented Programming. It is the programming paradigm that is defined using objects. Objects can be considered as real-world instances of entities like class, that have some characteristics and behaviours.

2. What is the need for OOPs ?
  There are many reasons why OOPs is mostly preferred, but the most important among them are -
1. OOPs helps users to understand the software easily, although they don't know the actual implementation.
2. With OOPs, the readability, understandability, and maintainability of the code increase multifold.
3. Even very big software can be easily written and managed easily using OOPs.

3. What are some major Object Oriented Programming languages ?
  The programming languages that use and follow the Object-Oriented Programming paradigm or OOPs, are known as Object-Oriented Programming Languages. Some of the major Object-Oriented Programming languages include -
1. Java
2. C++
3. JavaScript 
4. Python
5. PHP
6. Go
7. Dart
and many more

4. What are some other programming paradigms other than OOPs ?
  Programming 

5. What is meant by Structured Programming ?
  Structured Programming refers to the method of programming which consists of a completely structured control flow. Here structure refers to a block, which contains a set of rules, and has a definitive control flow, such as (if/then/else), (while and for), block structures, and subroutines.
Nearly all programming paradigms include Structured programming, including the OOPs model.

6. What are the main features of OOPs ?
  OOPs or Object-Oriented Programming mainly comprises of the four features -
1. Inheritance
2. Data Encapsulation 
3. Polymorphism 
4. Data Abstraction

7. What are some advantages of using OOPs ?
  Advantages of OOPs are -
1. OOPs is very helpful in solving very complex level of problems.
2. Highly complex programs can be created, handled, and maintained easily using object-oriented programming.
3. OOPs, promote code reuse, thereby reducing redundancy.
4. OOPs also helps to hide the unnecessary details with the help of Data Abstraction.
5. OOPs, are based on a bottom-up approach, unlike the Structural programming paradigm, which uses a top-down approach.
6. Polymorphism offers a lot of flexibility in OOPs.

8. Why is OOPs so popular ?
  OOPs programming paradigm is considered as a better style of programming. Not only it helps in writing a complex piece of code easily, but it also allows users to handle and maintain them easily as well. Not only that, the main pillar of OOPs - Data Abstraction, Encapsulation, Inheritance, and Polymorphism, makes it easy for programmers to solve complex scenarios. As a result of these, OOPs is so popular.

9. What is a class ?
  A class can be understood as a template or a blueprint, which contains some values, known as member data or member, and some set of rules, known as behaviour or functions. So when an object is created, it automatically takes the data and functions that are defined in the class.
Therefore the class is basically a template or blueprint for objects. Also one can create as many objects as they want based on a class.
For example, first, a car's template is created. Then multiple units of car are created based on that template.

10. What is an Object ?
  An object refers to the instance of the class, which contains the instance of the members and behaviours defined in the class template. In the real world, an object is an actual entity to which a user interacts, whereas class is just the blueprint for that object. So the objects consume space and have some characteristic behaviour.
For example, a specific car.

11. What is encapsulation ?
  One can visualize Encapsulation as the method of putting everything that is required to do the job, inside a capsule and presenting that capsule to the user. What it means is that by encapsulation, all the necessary data and methods are bind together and all the unnecessary details are hidden to the normal user. Encapsulation is the process of binding data members and methods of a program to do a specific job, without revealing unnecessary details.
Encapsulation can also be defined in two different ways :
1. Data Hiding : Encapsulation is the process of hiding unwanted information such as restricting access to any member of an object.
2. Data Binding : Encapsulation is the process of binding data members and methods together as a whole, as a class.

12. What is Polymorphism ?
  Polymorphism is composed of two words - "poly" which means "many" and "morph" which means "shapes". Therefore polymorphism refers to something that has many shapes.
In OOPs, Polymorphism refers to the process by which some code, data, method or object behaves differently under different circumstances. Compile time polymorphism and Run time polymorphism are the two types of polymorphisms in OOPs languages.

13. What is Compile Time Polymorphism ? How is different from Run Time Polymorphism ?
  Compile-Time Polymorphism - Compile-Time Polymorphism, also known as Static Polymorphism refers to the type of polymorphism that happens at the compile time. What it means is that compiler decide what shape or value has to be taken by the entity.

  Run-Time Polymorphism - Run-Time Polymorphism, also known as Dynamic Polymorphism refers to the type of polymorphism that happens at the run time. What it means is it can't be decided by the compiler. Therefore, what shape or value has to be taken depends upon the execution. Hence the name Runtime Polymorphism.
Example -
class Anyvehicle {
  public void move() {
  System.out.println("Any vehicle should move!!");
  }
}
class Bike extends Anyvehicle {
  public void move() {
  System.out.println("Bike can move too!!");
  }
}
class Test {
  public static void main(String[] args) {
  Anyvehicle vehicle = new Bike();
  vehicle = new Anyvehicle();
  vehicle.move();
  }
}

14. How does C++ support Polymorphism ?
  C++ is an object-oriented programming and it supports Polymorphism as well :
1. Compile Time Polymorphism - C++ supports compile-time polymorphism with the help of features like templates, function overloading, and default arguments.
2. Runtime Polymorphism - C++ supports runtime polymorphism with the help of features like virtual functions.

15. What is meant by Inheritance ?
  In Object-Oriented Programming, Inheritance is the mechanism by which an object or class(referred to as a child) is created using the definition of another object or class(referred to as parent). Inheritance not only helps to keep the implementation simpler but also helps to facilitate code reuse.

16. What is Abstraction ?
  Abstraction is the method of hiding unnecessary details from the necessary ones. It is one of the main features of OOPs.
For example, consider a car. You only need to know how to run a car and not how the wires are connected inside it. This is obtained using Abstraction.

17. How much memory does a class occupy ?
  Classes do not consume memory. They are just a blueprint based on which objects are created. Now when the objects are created, they actually initialize the class members and methods and therefore consume memory.

18. Is it always necessary to create objects from class ?
  No. An object is necessary to be created when base class has non-static methods, but when class has static methods, then objects is not necessary to be created. You can call class method directly in this class, using the class name.

19. What is Constructor ?
  Constructer refers to a special types of methods whose name is same as the class name. The Constructor serve the special purpose of initializing the objects.
For example, suppose there is a class with the name "MyClass", then when you instantiate this class, you pass this syntax - 
MyClass myclassobject = new MyClass();
Now here, the method called after "new" keyword - MyClass(), is the constructor of this class. This will help ti instantiate the member data and methods and assign them to the object myClassObject.

20. What are the various types of constructors in C++ ?
  The most common classification of constructor includes :
1. Default Constructor - The default constructor is the constructor which doesn't take any argument. It has no parameters.
For example -
class ABC {
  int x;
  ABC() {
    x=0;
  }
}

2. Parameterized Constructor - The constructor that take some arguments are known as PC.
For example - 
class ABC {
  int x;
  ABC(int y) {
    x=y;
  }
}

3. Copy Constructor - Copy constructor is the type of constructor whose purpose an copy an object to another object.
For example - 
class ABC {
  int x;
  ABC(int y) {
    x=y;
  }
// copy constructor
  ABC(ABC abc) {
    x=abc.x;
  }
}

21. What is a copy constructor ?
  Copy Constructor is a type of constructor, whose purpose is to copy an object to another. What it means is that a copy constructor will clone an object and its values, into another object, is provided that both the objects are of the same class.

22. What is a destructor ?
  Contrary to constructors, which initialize objects and specify space for them, Destructors are also special methods. But destructors free up the resources and memory occupied by an object. Destructors are automatically called when an object is being destroyed.

23. Are class and structure the same? If not, what's the difference between a class and a structure ?
  No, class and structure are not the same. Though they appear to be similar, they have differences that make them apart. For example, the structure is saved in the stack memory, whereas the class is saved in the heap memory. Also, Data Abstraction cannot be achieved with the help of structure, but with class, Abstraction is majorly used.

24. Explain Inheritance with an example ?
  Inheritance is one of the major features of object-oriented programming, by which an entity inherits some characteristics and behaviors of some other entity and makes them their own. Inheritance helps to improve and facilitate code reuse.
Let me explain to you with a common example. Let's take three different vehicles - a car, truck, or bus. These three are entirely different from one another with their own specific characteristics and behavior. But. in all three, you will find some common elements, like steering wheel, accelerator, clutch, brakes, etc. Though these elements are used in different vehicles, still they have their own features which are common among all vehicles. This is achieved with inheritance. The car, the truck, and the bus have all inherited the features like steering wheel, accelerator, clutch, brakes, etc, and used them as their own. Due to this, they did not have to create these components from scratch, thereby facilitating code reuse.

25. Are there any limitations of Inheritance ?
  Yes. The limitations of inheritance are:
1. Increased execution effort and time
2. Tight coupling of parent and child class
3. Requires correct implementation
4. It takes more time to jumping between different classes

26. What are the various types of Inheritance ?
  The various types of inheritance include:
1. Single inheritance
2. Multiple inheritances
3. Multi-level inheritance
4. Hierarchical inheritance
5. Hybrid inheritance

27. What is a subclass ?
  The subclass is a part of Inheritance. The subclass is an entity, which inherits from another class. It is also known as the child class.

28. Define a superclass ?
  Superclass is also a part of Inheritance. The superclass is an entity, which allows subclasses or child classes to inherit from itself.

29. What is an interface ?
  An interface refers to a special type of class, which contains methods, but not their definition. Only the declaration of methods is allowed inside an interface. To use an interface, you cannot create objects. Instead, you need to implement that interface and define the methods for their implementation. 

30. What is meant by static polymorphism ?
  Static Polymorphism is commonly known as the Compile time polymorphism, refers to the types of polymorphism that happens at the compile time. What it means is that compiler decided what shape or value has to be taken by the entity. Static or Compile time Polymorphism can be achieved through Method overloading or operator overloading.

31. What is meant by dynamic polymorphism ?
  Dynamic Polymorphism or Runtime polymorphism refers to the type of Polymorphism that happens at the runtime. What it means is that it cannot be decided by the compiler. what shape or value has to be taken during the execution. The dynamic or runtime polymorphism can be achieved with the help of method overriding.

32. What is the difference between overloading and overriding ?
  Overloading is a compile-time polymorphism feature in which an entity has multiple implementations with the same name. For example, Method overloading and Operator overloading.
  Overriding is a runtime polymorphism feature in which an entity has the same name, but its implementation changes during execution. For example, Method overriding.

33. How is data abstraction accomplished ? 
  Data abstraction is accomplished with the help of abstract methods or abstract classes.

34. What is an abstract class ?
  An abstract class is a special class containing abstract methods. The significance of abstract class is that the abstract methods inside it are not implemented and only declared. So as a result, when a subclass inherits the abstract class and needs to use its abstract methods, they need to define and implement them.

35. How is an abstract class different from an interface ?
  Interface and abstract classes both are special types of classes that contain only the methods declaration and not their implementation. But the interface is entirely different from an abstract class. The main difference between the two is that when an interface is implemented, the subclass must define all its methods and provide its implementation. Whereas in object-oriented programming, when a subclass inherits from an abstract class with abstract methods, the subclass is generally required to provide concrete implementations for all of those abstract methods in the abstract class unless the subclass itself is declared as abstract.
Also, an abstract class can contain abstract methods as well as non-abstract methods.

36. What are access specifiers and what is their significance ?
  Access specifier are keywords which are used to define the access scope of the method, class or variable. In Java, there are four access specifier are - 
1. Public - The class, method or variable which are defined as public, can be accessed by all class or method.
2. Protected - Protected can be accessed by the class of the same package, by subclass in the class, or within the same class.
3. Default - Default are accessible within the package only. By default, the class, method or variable are of default scope.
4. Private - The private class, method or variable are defined as private can be accessed within the class only.

37. What is an exception ?
  Exception is a mechanism where we find that our program was terminated because of an unexpected failures.

Exception can be devided into two types - 
1. Compile-time exception
2. run-time exception
so we need to handle the exception through exception handling concept.

It can be done in the following ways - 
1. try
2. catch
3. throw
4. throws
5. finally

38. What is meant by exception handling ?
  Exception handling is the mechanism for identifying the undesirable states that the program can reach and specifying the desirable outcomes of such states.
Try-catch is the most common method used for handling exceptions in the program.

39. What is meant by Garbage Collection in OOPs world ?
  Object-oriented programming revolves around entities like objects. Each object consumes memory and there can be multiple objects of a class. So if these objects and their memories are not handled properly, then it might lead to certain memory-related errors and the system might fail.
Garbage collection refers to this mechanism of handling the memory in the program. Through garbage collection, the unwanted memory is freed up by removing the objects that are no longer needed.

40. Can we run a Java application without implementing the OOPs concept?
No. Java applications are based on Object-oriented programming models or OOPs concept, and hence they cannot be implemented without it.
However, on the other hand, C++ can be implemented without OOPs, as it also supports the C-like structural programming model.

41. What is the difference between throw and throws ?
  throw
1. It is used to actually throw an exception.
2. throw is used within the method.
3. We are allowed to throw only one exception at a time i.e. we cannot throw multiple exceptions.

  throws
1. It is used in method declarations to specify possible exceptions.
2. throws is used within the method signature.
3. We can declare multiple exceptions using throws keyword that can be thrown by the method. For example, main() throws IOException, SQLException.

42. What are the advantages and disadvantages of OOPs ?
  Advantages of OOPs
1. OOPs is very helpful in solving very complex level of problems.
2. Highly complex programs can be created, handled, and maintained easily using object-oriented programming.
3. OOPs, promote code reuse, thereby reducing redundancy.
4. OOPs also helps to hide the unnecessary details with the help of Data Abstraction.
5. OOPs, are based on a bottom-up approach, unlike the Structural programming paradigm, which uses a top-down approach.
6. Polymorphism offers a lot of flexibility in OOPs.

  Disadvantages of OOPs
1. Proper planning is required.
2. Program design is tricky.
3. Programmer should be well skilled.
4. Classes tend to be overly generalized.

43. What are the limitations of OOPs ?
  Limitations of OOPs are - 
1. Require intensing testing process.
2. Solving problems takes more time as compared to Procedure Oriented Programming.
3. Not suitabe for small code.
4. In certian scenarios, these programs can consume a large amount of memory.
5. Takes more time to solve problems.

44. What are the difference between class and object ?
  Class
1. It is a logical entity.
2. It is conceptual.
3. It binds data and methods together in a single unit.
4. It does not occupy space in the memory.
5. Class can be understood as a blueprint.
6. It is declared once.
7. It uses the keyword class when declared.
8. A class can exist without any object.

  Object
1. It is a real world entity.
2. It is real.
3. It is just like a variable of a class.
4. It occupies space in the memory.
5. It is an instance of the class.
6. Multiple objects can be declared.
7. It uses the new keyword to create an object.
8. Objects cannot exist without a class.

45. What are the rules for creating a constructor ?
  Rules for creating a constructor -
1. It cannot have a return type.
2. It must have the same name as the class.
3. It cannot be marked as static.
4. It cannot be marked as abstract.
5. It cannot be overridden.
6. It cannot be final.

46. What are the difference between error and exception ?
  Error
1. An error cannot be recovered.
2. All errors in java are unchecked.
3. It occurs at run time.
4. It belongs to java.lang.Error package.
5. Errors will not be known to the compiler.
6. Example - Java.lang.StackOverflow

  Exception
1. Exception can be recovered by using the try-catch block.
2. It can be classified into two categories i.e. checked and unchecked.
3. It occurs at compile time or run time.
4. It belongs to java.lang.Exception package.
5. Only checked exceptions are known to the compiler.
6. Example - NullPointerException

47. Is it possible for a class to inherit the constructor of its base class ?
  No, a class cannot inherit the constructor of its base class.

48. Give a real-world example of polymorphism ?
  The general meaning of Polymorphism is one that has different forms. The best real-world example of polymorphism is a person that plays different roles at different palaces or situations.
1. At home a person can play the role of father, husband, and son.
2. At the office the same person plays the role of boss or employee.
3. In public transport, he plays the role of passenger.
4. In the hospital, he can play the role of doctor or patient.
5. At the shop, he plays the role of customer.

49. What is the difference between a base class and a superclass ?
  The base class is the root class- the most generalized class. At the same time, the superclass is the immediate parent class from which the other class inherits.

50. Define virtual functions ?
  The functions that help achieve runtime polymorphism are a part of functions present in the parent class and overridden by a subclass. 

51. What is the difference between method overloading and method overridden ?
  Method Overloading
1. Method overloading is used to increase the readability of the program.
2. Method overloading is performed within class.
3. In case of method overloading, parameter must be different.
4. Method overloading is the example of compile time polymorphism.

  Method Overriding
1. Method overriding is used to provide the specific implementation of the method that is already provided by its super class.
2. Method overriding occurs in two classes that have IS-A (inheritance) relationship.
3. In case of method overriding, parameter must be same.
4. Method overriding is the example of run time polymorphism.

52. What is Constructor Overloading ?
  A class has multiple constructors having same name but different in parameters.
Example - 
public class Emp {
//instance variable of the class
int id;
String name;

Emp() {
  System.out.println("default constructor");
}
Emp(int i, String n){
id = i;
name = n;
}}

53. What is Constructor Overriding ?

54. What is Finally block in Java ?
  1. It follows try-catch block.
  2. It is always executed whether an exception is handle or not.
  3. It is used to execute important code such as closing connection.
Syntax -
try{
//code might have an exception
}
catch{
//statement that handle an exception
}
finally{
//code to execute
}

55. What is try-catch block in java ?
  1. it contains a set of statements where an exception can occur.
  2. A try block is always followed by a catch block, which handles the uncertain condition of a try block.
  3. If the code has or throws any exception it should be handled by using catch blocks.
Syntax -
try{
//code might have an exception
}
catch{
//statement that handle an exception
}

56. What is checked exception in Java ?
  1. An exception that occurs during the compile time, they can be checked before the execution of the program.
  2. It is also known as compile exception.
  3. Type of checked exception are - IOException, SQLException
  4. Example - 
class ExceptionTest {
  public static void main(String[] args) {
    throws FileNotFoundException {
    FileInputStream file = null;
    try {
      file = new FileInputStream("home/mayur/GFG.txt");  //file note found exception
    }
    catch (FileNotFoundException e) {
      System.out.println("File does not Found");
    }}}}

57. What is unchecked exception in Java ?
  1. It is an exception that occurs during the runtime of program. 
  2. It is also known as runtime exception.
  3. Type of unchecked exception are - ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException etc.
  4. Here are some example - 
public class ExceptoinTest {
  public static void main(String[] args){
    int a = 50/0;  //ArithmeticException
    
    String s=null;
    System.out.println(s.length());  //NullPointerException

    int a[] = new int[5];
    a[10] = 50; //ArrayIndexOutOfBoundsException
}}

58. What is Custom Exception ?
  A custom exception is a user defined class that extends 'Exception' or 'RuntimeException'.

59. What is the try-with-resources statement ?
  'try-with-resources' automatically closes resources when the block finishes execution.

60. What is the difference between Encapsulation and Data Abstraction ?
  Encapsulation
1. Encapsulation is a process of binding the data member and method of the program together to do a specific job, without revealing unnecessary details.
2. Encapsulation solves at issue at implementation level.
3. It focuses on internal working.
4. It can be implemented by the access modifiers.
5. It is the process of containing the information.
6. We use the getters and setters methods to hide the data.
7. The object need not to abstract that result in encapsulation.
8. Here example -
public class Employee {
    private String name;
    private int salary;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getSalary() {
        return salary;
    }

    public void setSalary(int salary) {
        this.salary = salary;
    }
}

  Abstraction
1. Abstraction is the process of hiding the unnecessary details from the necessary details.
2. It solves an issue at the design level.
3. It focuses on the external lookout.
4. It can be implemented using abstract classes and interfaces.
5. It is the process of gaining information.
6. In abstraction, we use abstract classes and interfaces to hide the code complexities.
7. The objects are encapsulated that helps to perform abstraction.
8. Here example - 
public abstract class Shape {
    public abstract double calculateArea();
}

public class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}

61. What is the difference between get() and set() ?
62. What is the difference between Abstract Class and Interfaces ?
  Abstract Class
1. Abstract class can have abstract and non-abstract methods.
2. Abstract class doesn't support multiple inheritance.
3. Abstract class can have final, non-final, static and non-static variables.
4. Abstract class can provide the implementation of interface.
5. The abstract keyword is used to declare abstract class.
6. An abstract class can extend another Java class and implement multiple Java interfaces.
7. An abstract class can be extended using keyword "extends".
8. A Java abstract class can have class members like private, protected, etc.
9. Example:
public abstract class Shape{
public abstract void draw();
}

  Interface
1. Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2. Interface supports multiple inheritance.
3. Interface has only static and final variables.
4. Interface can't provide the implementation of abstract class.
5. The interface keyword is used to declare interface.
6. An interface can extend another Java interface only.
7. An interface can be implemented using keyword "implements".
8. Members of a Java interface are public by default.
9. Example:
public interface Drawable{
void draw();
}

Example of both abstract class and interface
//Creating interface that has 4 methods  
interface A{  
void a();//bydefault, public and abstract  
void b();  
void c();  
void d();  
}  
  
//Creating abstract class that provides the implementation of one method of A interface  
abstract class B implements A{  
public void c(){System.out.println("I am C");}  
}  
  
//Creating subclass of abstract class, now we need to provide the implementation of rest of the methods  
class M extends B{  
public void a(){System.out.println("I am a");}  
public void b(){System.out.println("I am b");}  
public void d(){System.out.println("I am d");}  
}  
  
//Creating a test class that calls the methods of A interface  
class Test5{  
public static void main(String args[]){  
A a=new M();  
a.a();  
a.b();  
a.c();  
a.d();  
}}  
/*
Output:
I am a
I am b
I am c
I am d
*/

63. What is the difference between final, finally and finalize ?
  Final
1. final is the keyword and access modifier which is used to apply restrictions on a class, method or variable.
2. Final keyword is used with the classes, methods and variables.
3. Once declared, final variable becomes constant and cannot be modified.
4. Final method is executed only when we call it.

  Finally
1. finally is the block in Java Exception Handling to execute the important code whether the exception occurs or not.
2. Finally block is always related to the try and catch block in exception handling.
3. finally block runs the important code even if exception occurs or not.
4. Finally block is executed as soon as the try-catch block is executed.

  Finalize
1. finalize is the method in Java which is used to perform clean up processing just before object is garbage collected.
2. finalize() method is used with the objects.
3. finalize method performs the cleaning activities with respect to the object before its destruction.
4. finalize method is executed just before the object is destroyed.

64. What is Static keyword ?
  Static keyword -
1. The static keyword in Java is used for memory management mainly. 
2. We can apply static keyword with variables, methods, blocks and nested classes.  
3. The static keyword belongs to the class than an instance of the class.
4. The static can be:
  1. Variable (also known as a class variable)  
  2. Method (also known as a class method)
  3. Block
  4. Nested class

65. What is Static Variable ?
  Static Variable -
1. The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.
2. The static variable gets memory only once in the class area at the time of class loading.

66. What is Static Method ?
  Static Method -
1. A static method belongs to the class rather than the object of a class.
2. A static method can be invoked without the need for creating an instance of a class.
3. A static method can access static data member and can change the value of it.

67. What is Static Block ?
  Static Block -
1. Is used to initialize the static data member.
2. It is executed before the main method at the time of classloading.


String
1. What is a String in Java ?
  A string is an object that represents a sequence of characters.

2. What is the difference between 'String', 'StringBuilder' and 'StringBuffer' ?
  String
1. String is immutable.
2. String is slow and consumes more memory when we concatenate too many strings because every time it creates new instance.
3. String class uses String constant pool.

  StringBuilder
1. StringBuilder is mutable and not synchronized.
2. StringBuilder is more efficient than StringBuffer.

  StringBuffer
1. StringBuffer is mutable and synchronized.
2. StringBuffer is fast and consumes less memory when we concatenate strings.
3. StringBuffer uses Heap memory.
4. StringBuffer is less efficient than StringBuilder.

3. How do you compare two strings in Java ?
  Use the 'equals()' method to compare the contents of two strings.

4. What is the 'intern()' method ?
  The 'intern()' method returns a canonical representation of a string.

5. What is String concatenation ?
  String concatenation is joining two or more strings together using the '+' operator or 'concat()' method.

6. How do you convert a string to an integer ?
  Use 'Integer.parseInt()' to convert a string to an integer.

7. What is the 'substring()' method ?
  The substring() method extracts a part of the string based on given indices.

8. What is String.format() used for ?
  String.format() is used to create formatted strings with specified format specifiers.

9. How do you check if a string contains a specific sequence ?
  Use the contains() method to check if a string contains a specific sequence.

10. What is StringBuilder used for ?
  StringBuilder is used for creating and manipulating the mutable strings.

Multi-threading
1. What is a thread ?
  A thread is a loghtweight process that executes code independently within a program.

2. What is the difference between 'Runnable' and 'Thread' ?
  Runnable
1. Runnable is an interface that defines a task.

  Thread
1. Thread is a class that can be used to execute tasks in parallel.

3. How do you create a thread in Java ?
  You can create a thread by extending the thread class or implementing the runnable interface.

4. What is the 'synchronized' keyword ?
  The synchronized keyword is used to ensure that a block of code or method is accessed by only one thread at a time.

5. What is a deadlock ?
  A deadlock is a situation where two or more threads are blocked forever, waiting for each other to release resources.

6. What is thread safety ? 
  Thread safety means that a class or method behaves correctly when multiple threads access it concurrently

7. What is the 'join()' method ?
  The join() method is used to wait for a thread to finish its execution.

8. What is the 'volatile' keyword ?
  The volatile keyword ensures that a variable's value is always read from and written to the main memory.

9. What is the different states of a thread ?
  The states of a thread are - New, Runnable, Blocked, Waiting, Timed Waiting, and Terminated.

10. What is a thread pool ?
  A thread pool is a collection of worker threads that efficiently execute tasks.

Collections
1. What is the Java Collections Framework ?
  It is a set of classes and interfaces that implement commonly reusable collection data structures.

2. What is the difference between List, Set and Map ?
  List
1. It allows duplicates and maintains order.

  Set
1. It does not allow duplicates and has no order.

  Map
1. It stores key-value pairs with unique keys.

3. What is ArrayList ?
  ArrayList is a resizable array implementation of the List interface.

4. What is HashSet ?
  HashSet is a set implementation that uses a hash table and does not maintain order.

5. What is LinkedList ?
  LinkedList is a doubly-linked list implementation of the List Interface.

6. What is HashMap ?
  HashMap is a map implementation that uses a hash table for key-value pairs.

7. What is the difference between HashMap and TreeMap ?
  HashMap
1. It does not maintain order.

  TreeMap
1. It maintains keys in a sorted order.

8. What is PriorityQueue ?
  It is a queue that orders elements based on their natural ordering or a comparator.

9. What is LinkedHashMap ?
  It maintains the order of elements based on their insertion order.

10. How do you iterate over a collection ?
  Use an iterator or enhanced for-loop to iterate over a collection.
