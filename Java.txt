1. What is Java and types of data type ?
  1. Java is a high level,object-oriented programming language that was developed by James Gosling at 1995.
  2. It is platform-independent, meaning that programs written can run on any platform that has a Java Virtual Machine(JVM) installed in it.
  3. There are two types of data types defined in the java - 
    i. primitive - This type of data is predefined by Java. We just use them to provide the data type for the input. These data types are defined as below - 
      - byte
      - short
      - int
      - long
      - float
      - double
      - char
      - boolean
    ii. non-primitive - This type of data type can be customized by the user. These are as below -
      - String
      - array

2. Why is Java not a pure Object-Oriented Programming Language ?
  Java supports primitive data types - byte, short, int, long, float, double, char, boolean.

3. What is Instance and Local Variable ?
  Instance Variable - Instance variables are those variables that are accessible by all the methods in the class. They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it at any cost.
Example -
class Athlete {
  public string athleteName;
  public double athletespeed;
  public int athleteage;
}

  Local Variable - Local variables are those variables present within a block, function, or constructor and can be accessed only inside them. Whenever a local Variable is declared inside a method, the other class methods don't have any knowledge about the local Variable.
Example - 
public void athlete() {
  String athleteName;
  double athletespeed;
  int athleteage;
}

Instance vs Local Variables
class Athlete {
  public String athleteName;
  public double athletespeed;
  public int athleteage;

  public Athlete(name,speed,age) {
    this.athleteName = name;
    this.athletespeed = speed;
    this.athleteage = age;
  }

  public void athleteRun() {
    int speed = 100;
    System.out.println("Athlete runs at" + speed + "km/hr");
  }
}

In class Athlete, athleteName, athletespeed, athleteage are instance variables.
name, speed, age and int speed = 100 are the local variables.

4. What do you mean by data encapsulation ?
  1. Data encapsulation is an object-oriented programming concept of hiding the data attributes and their behaviours in a single unit.
  2. It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its own methods, attributes, and functionalities.
  3. It is used for the security of the private properties of an object and hence serves the purposes of data hiding.
class {
  data members(properties)
      +
  methods(behaviour)
}

5. What are the difference between equals() and equality operator(==) ?
  Difference b/w equals() and equality operator(==)
equals()
1. This is a method defined in the object class.
2. This method is used for checking the equality of contents between two objects as per the specified business logic.
3. The equals() method is present in the object class, so we can override our custom equals() method in the custom class, for object comparison.

==(equality operator)
1. It is a binary operator in Java.
2. This operator is used for comparing addresses i.e., checks if both the objects are pointing to the same memory location.
3. It cannot be modified. They always compare the HashCode.

6. Why is Java a platform independent language ?
  Java language are developed so that it does not depend on any hardware or software because the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems.
The only condition to run that byte code is for the machine to have a runtime environment(JRE) installed in it.

7. What is Method ?
  1. Method is the part of the class where we put our logic.
  2. Method are having their own body.
  3. We cannot create methods inside a method.
  4. There are four types of methods defined - 
    i. parameterized
    ii. non-paremeterized
    iii. return type
    iv. non-return type

8. What are the features of Java ?
  Java has several features that make it a popular programming language. Some of these features are easy to learn, OOPs, Platform Independence, Robust, Portable and Secured.
1. Easy - Java is a language which is considered easy to learn.
2. OOPs - OOPs stands for Object-Oriented Programming Language. OOPs signifies that, in java, everything is considered an object.
3. Platform Independence - Java is not compiled into a platform-specific machine. Instead, it is compiled into platform independence bytecode. This code is interpreted by the virtual machine on which the platform runs.
4. Robust - Java is a strong programming language as it uses strong memory management. The concepts like Automatic Garbage Collection, Exception Handling, etc make it more robust.
5. Portable - Java supports read-once-write anywhere approach. We can execute the java program on every machine.
6. Secured - Java is secured because it doesn't use explicit pointers. Java also provides the concept of bytecode and exception handling which makes it more secured.

9. What is JVM ?
  JVM stands for Java Virtual Machine. It is an abstract machine that provides the runtime environment in which java programs are executed. The JVM interprets Java bytecode and translates it into machine-specific code.

10. What is the difference between JDK, JRE, JVM ?
  JDK - 
1. JDK stands for Java Development Kit.
2. It is a software development kit that includes tools for developing, compiling, and debugging Java programs.
  JRE - 
1. JRE stands for Java Runtime Environment.
2. It is a software environment that provides the necessary runtime libraries components for running java program.
  JVM - 
1. JVM stands for Java Virtual Machine.
2. It is a virtual machine that executes the Java bytecode.

11. What are the Memory Allocations available in Java ?
  Java has five significant types of memory allocations -
1. Class Memory - Class Area stores per-class structures such as the runtime constant pool, field, method data and the code for methods.
2. Heap Memory - It is the runtime data area in which the memory is allocated to the objects.
3. Stack Memory - Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.
4. Program Counter-Memory - PC(Program Counter) register contains the address of the Java Virtual Machine instruction currently being executed.
5. Native Method Stack Memory - It contains all the native method used in the application.

12. What are the difference between Heap and Stack Memory in Java and how Java utilizes it.
  Stack memory is the portion of memory that was assigned to every individual program, and it is fixed.
  Heap Memory is the portion that was not allocated to the Java Program but it will be available for use by the Java Program when it is required, mostly during the runtime of the program.
Java Utilizes this memory as - 
When we write a Java Program then all the variables, methods, etc are stored in the stack memory.
And when we create any object in the Java Program then that object was created in the heap Memory. And it was referenced from the Stack Memory.
Example - 
class Main {
  public void
printarray(int[] array) {
    for(int i : array) 
      System.out.println(i);}
  public static void main(String[] args){
    int[] array = new int[10];
    printarray(array);
}}
Main and PrintArray is the method that will be available in the stack area and as well as the variables declared that will also be in the stack area.
And the object(Integer Array of Size 10) we have created, will be available in the Heap area because that space will be allocated to the program during runtime.

13. Can Java be said to be the Complete OOL ?
  It is not wrong if we claim that Java is the complete object oriented programming language because everything in Java is under the classes and we can access them by creating the objects.
But we can even say that Java is not a complete object oriented programming language because it has the support of primitive data types like byte,short,int etc.
Now for the question : Is java a completely OOPL ? we can say that - Java is not a pure object oriented programming language, because it has direct access to primitive data types and these primitive data types don't belong to the Integer classes.

14. What is JIT Compiler ?
  Just-In-Time Compiler - It is used to improve performance. JIT compiler part of the bytecode that has same functionality at the same time, and hence reduce the amount of time need for compilation. Hence the "compiler" refers to the translator for the instruction set of the Java Virtual Machine to the instruction set of the specific cpu.

15. What is the platform ?
  A Platform is the hardware or software environment in which a piece of software is executed. There are two types of platform, software based and hardware based platform. Java provides software based platform.

16. What are the difference between the Java Platform and other platforms ?
  1. Java is the software based platform whereas other platforms may be the hardware or software based platform.
  2. Java is executed on the top of other hardware platform whereas other platform can only have the hardware components.

17. What is ClassLoader ?
  Classloader is the subsystem of Java Virtual Machine(JVM) which is used for load class files. Whenever we run the Java Program, it is loaded first by the classloader. There are three built-in classloader -
1. BootStrap ClassLoader - This is the first classloader which is a superclass of the extension classloader. It loads the rt.jar file which contails all the class files of JSE like java.lang package classes etc.
2. Extension Classloader - This is the class classloader of the bootstrap classloader and parent classloader of the System Classloader.
3. System/Application Classloader - This is the child classloader of the extension classloader. It loads the class files from the classpath.

18. Is delete, next, main, exit or null keyword in Java ?
  No

19. What if I write static public void instead of public static void ?
  The program compiles and runs correctly because the order of specifier doesn't matter in Java.

20. What is the default value of the local variables ?
  Local variables is not initialized by the default value, neither primitive types nor object references.

21. What are the various access specifiers in Java ?
  In java, access specifiers are keyword which is used to define the access scope of the class, methods or variable. There are four types of access specifiers are -
1. Public - The public classes, methods or variables which are defined as public, which can be assigned by any class or method.
2. Protected - Protected can be accessed by the class of the same package, or sub-class in the class or within the same class.
3. Default - Default are accessed within the package only. By default, all the classes, methods and variables are of default scope.
4. Private - The private class, method or variables defined as private can be accessed within the class only.

22. What is the purpose of static methods and variables ?
  The methods or variables defined as static are shared among all the objects of the class. The static is the part of the class and not of the object. The static variable are stored in the class area, and we do not need to create the object to access such variables. Therefore, static is used in the case, where we need to define variables or methods which are common to all the objects of the class.
For example, In the class, simulating the collection of the student in a college, the name of the college is the common attribute to all the students. Therefore, the college name will be defined as static.

23. Will the program run if we write static public void main ?
  Yes, the program compiles and run correctly because the order of specifiers doesn't matter in Java.

24. Define Wrapper Classes in Java.
  In java, when you declare primitive data types, then wrapper classes are responsible for converting them into objects(Reference types).

25. What is the singleton class in Java ? How to implement a singleton class ?
  A class that can possess only one object at a time is called a singleton class. To implement a singleton class steps to be followed - 
1. Make sure that the class has only one object.
2. Give global access to that object.

26. Can you implement pointers in a Java Program ?
  Java Virtual Machine takes care of memory management implicity, Java primary motto was to keep programming simple. So, accessing memory directly through pointers is not a recommended action. Hence,pointers are eliminated in Java.

27. Explain Java String Pool.
  A collections of strings in Java Heap memory is referred to as java string pool. In case, you can try to create new String Object. JVM first checks the presence of the object in the pool. If available, the same object reference is shared with the variable; else a new object is created.

28. What is Final Keyword in Java ?
  Using the final keyword means that the value can't be modified in the future.
It can be used with variable,methods and classes.
Example - 
final int speedlimit = 90;  //final variable
final void run() {
  //final method
  System.out.println("running");
}
final class Bike {
  // final class
}

Questions based on this line - 
public static void main(String[] args)
where,
public - access modifier
static - keyword
void - return type
main() - method name
String - String class
args - array of string objects

29. What is the purpose of main() method in Java ?
  The main method is the entry point of an executable program; it is where the program control starts and ends.

30. What is the return type of the main() method ?
  The return type of the main method in java is void. This means that the main method doesn't return any value. It is declared with the void keyword.

31. Why is the main() method declared static ?
  It allows the method to be called without creating an instance of the class in which it is defined.

32. Can we use a different name for the main() method, like start() ?
  No, because JVM call the method with the name main() only.

33. Does the order the public and static declaration matter in main() method ?
  No, the order of the public and static modifiers in the main() method declaration doesn't matter. Both public static and static public are valid and interchangeable.
public static void main(String[] args)
static public void main(String[] args)

34. Can we declare the main() method as final ?
  Yes, we can declare the main() method as final in Java. The compiler does not throw any error.

35. Can we run a Java program without the main() method ?
  Java 7 and newer versions don't allow this because JVM checks the presence of the main() method before initializing the class.

36. Can you overload the main() method ?
  Yes, we can overload the main() method. We can write more than one public static void main() method by changing the arguments.
Example - 
public static void main(String[] args)
public static void main(String[] name)
public static void main(int[] name)

37. Can we override the main() method ?
  We cannot override main() method because a static method cannot be overridden.

38. Explain final variable in Java ?
  1. Final variable is that cannot be reinitialized with another value.
  2. Syntax - final int x = 10;
  3. Here, x is declared as a final variable with an initial value of 10. Since it is declared as final, it cannot be reassigned later.

39. Explain Final Method in Java ?
  1. Final Method cannot be modified or overridden by any subclass.
  2. It is used when you want to ensure that a particular method behaves consistently across all subclasses and cannot be changed or customized.
  3. Syntax -
  final void run() {
  //final method
    System.out.println("running");
}
40. What is Autoboxing in Java ?
  1. The Java compiler automatically converts primitive data type into its corresponding wrapper class is known as autoboxing class.
Such as - int to Integer, double to Double, char to Character etc.

41. What is Lamda Expression in Java ?
  1. Lamda expression are the method without name that is called Anonymous method.
  2. Lamda expression is a function that can be passed around and referenced as an object.

42. What is Variable ?
  1. A variable is a name given to a memory location. It is used to store a value that may vary. 
  2. Java is a statically type language , and hence all the variable are declared before use.
  3. Example - int value = 10;
